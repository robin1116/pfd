==============================
# HT 编辑器目录文件管理类说明
==============================

HT 编辑器的左上角 editor.leftTopTabView 组件中，包含了四个存储目录管理页签：
    - editor.displays   管理图纸目录 storage/displays
    - editor.symbols    管理图标目录 storage/symbols
    - editor.components 管理组件目录 storage/components
    - editor.assets     管理资源目录 storage/assets

以上四个页面内容都是由 hteditor.Explorer 类构建的目文件录管理对象：
    new hteditor.Explorer(editor, rootDir, editable)
    - editor    编辑器对象
    - rootDir   根目录名称
    - editable  是否可编辑

Explorer 组件主要分为上下两部分构成：
    - explorer.tree 上半部分，树状目录信息，为 ht.widget.TreeView 对象
    - explorer.list 下半部分，当前 tree 选中目录下的文件信息，为 ht.graph.GraphView 对象

tree 和 list 组件共享了同个 DataModel 数据容器，但 list.setSelectionModelShared(false)，因此两个组件有自己独立的选择模型，用户可分别对 tree 和 list 进行 setVisibleFunc 设置过滤。

tree 和 list 共享的 DataModel 容器存储的目录文件节点 Data 都有 fileType 属性:
    - 'root':       根目录节点 explorer.rootNode
    - 'dir':        目录节点
    - 'display':    storage/displays 目录中 json 后缀文件
    - 'symbol':     storage/symbols 目录中 json 后缀文件
    - 'component':  storage/components 目录中 json 后缀文件
    - 'model':      storage/models 目录中 json 后缀文件
    - 'scene':      storage/scenes 目录中 json 后缀文件
    - 'image':      storage/assets 目录中 png|jpg|gif|jpeg|bmp|svg|dxf|mp4|mp3 后缀文件
    - 'unknow':     除以上类型外的文件

根目录节点 editor.symbols.rootNode 属性：
    - fileType: 'root'
    - path: '',
    - rootDir: 'symbols'
    - url: 'symbols'
    - getId(): 'symbols'
    - getName(): 'symbols'

文件节点 symbols/demo/topology/电脑.json 属性：
    - fileType: 'symbol'
    - path: 'symbols/demo/topology'
    - rootDir: 'symbols'
    - url: 'symbols/demo/topology/电脑.json'
    - getId(): 'symbols/demo/topology/电脑.json'
    - getName(): '电脑.json'

tree 的 isVisible 逻辑如下：
    tree.isVisible = function(fileNode) {
        if (this._visibleFunc && this._visibleFunc(fileNode) === false) return false;
        return fileNode.fileType === 'dir' || fileNode.fileType === 'root';
    };

list 的 isVisible 逻辑如下：
    list.isVisible(fileNode) = funtion(fileNode) {
        if (this._visibleFunc && this._visibleFunc(fileNode) === false) return false;
        var data = this.dm().sm().ld();
        if (!data || fileNode.getParent() !== data) {
            return false;
        }
        return fileNode.fileType !== 'unknown';
    };

Explorer 除了可用于管理后台目录文件外，用户也可以手工设置模型目录文件结构，例如 config-points.js 的 createPointsExplorer 函数，通过 JSON 数据信息，构建了一个测点管理的 Explorer 组件：
    var pointsExplorer = new hteditor.Explorer(editor, '测点根目录', false);

构建 JSON 数据，通过 parse(json) 函数填充 pointsExplorer 组件内容：
    var json = {
        '电池': {
            'B001': { fileType: 'point', fileIcon: 'symbols/demo/battery/battery.json' },
            'B002': { fileType: 'point', fileIcon: 'symbols/demo/battery/battery.json' },
            'B003': { fileType: 'point', fileIcon: 'symbols/demo/battery/battery.json' }
        },
        '油罐': {
            'T001': { fileType: 'point', fileIcon: 'symbols/可视化/basic/tank.json' },
            'T002': { fileType: 'point', fileIcon: 'symbols/可视化/basic/tank.json' },
            'T003': { fileType: 'point', fileIcon: 'symbols/可视化/basic/tank.json' },
            'T004': { fileType: 'point', fileIcon: 'symbols/可视化/basic/tank.json' }
        },
        '风扇': {
            '三叶片': { fileType: 'dir', attrs: { 'needToLoad': true, prefix: 'FA/', icon: 'symbols/demo/fan/fan1.json' } },
            '四叶片': { fileType: 'dir', attrs: { 'needToLoad': true, prefix: 'FB/', icon: 'symbols/demo/fan/fan2.json' } }
        },
        '电流': {
            'Ia': { fileType: 'point', fileIcon: textIcon, styles: { 'image.stretch': 'uniform' } },
            'Ib': { fileType: 'point', fileIcon: textIcon, styles: { 'image.stretch': 'uniform' } },
            'Ic': { fileType: 'point', fileIcon: textIcon, styles: { 'image.stretch': 'uniform' } },
            '空目录': {
            },
            '自定义目录': {
                fileType: 'dir',
                fileIcon: 'symbols/可视化/basic/告警.json',
                fileImage: 'symbols/可视化/basic/告警绑定.json',
                attrs: {
                    alarmInfo: {
                        severity: 1,
                        count: 8
                    }
                },
                children: {
                    'None drag image': { fileType: 'point', fileIcon: textIcon, styles: { 'image.stretch': 'uniform' }, attrs: { dragImage: null } },
                    'Custom drag image': {
                        fileType: 'point',
                        fileIcon: textIcon,
                        fileImage: 'symbols/可视化/basic/ht.json',
                        styles: { 'image.stretch': 'uniform' },
                        attrs: { dragImage: 'assets/图扑软件.png' }
                    },
                }
            }
        }
    }
    pointsExplorer.parse(json);

每个节点都是由 name: info 构成
    - name: 文件或目录名称
    - {
        fileType:   文件类型，如未指定则默认为目录类型 dir
        children:   可选，目录需要自定义扩展才需要，一般目录直接将整个 info 作为所有子文件的 key/value 对
        fileIcon:   该值将被设置到 setIcon(fileIcon) 上，目录可不设置，文件一般要设置，否则显示为空
        fileImage:  该值将被设置到 setImage(fileImage|fileIcon) 上，如果为指定则采用 fileIcon 值
        styles:     该值将被设置到节点的 Style 属性上
        attrs:      该值将被设置到节点的 Attr 属性上
    }

Explorer 的 parseChild(parentNode, name, info) 函数，可供动态追加子孙节点信息，以下代码监听 tree 目录的选中事件，对设置了 needToLoad 属性为 true 的目录，通过 parseChild 追加孩子节点信息：
    pointsExplorer.tree.sm().ms(function(event) {
        var data = pointsExplorer.tree.sm().ld();
        if (data && data.a('needToLoad')) {
            data.a('needToLoad', false);
            for (var i = 1; i < 10; i++) {
                var value = {
                    fileType: 'point',
                    fileIcon: data.a('icon')
                };
                pointsExplorer.parseChild(data, data.a('prefix') + i, value);
            }
        }
    });

如果希望 list 文件可拖拽到图纸或图标画布可通过设置 isDroppableToDisplayView 和 isDroppableToSymbolView 为 true 实现，通过重载 handleDropToEditView 函数，可自定义拖拽文件节点放手后的动作逻辑：

    pointsExplorer.list.isDroppableToDisplayView = true;
    pointsExplorer.list.handleDropToEditView = function(view, fileNode, point, event) {
        if (fileNode.getIcon() === textIcon) {
            var text = new ht.Text();
            text.s({
                'text': '##.#',
                'text.align': 'center'
            });
            text.setDataBindings({
                s: { text: { id: fileNode.getName() }  }
            });
            text.setDisplayName(fileNode.getName());
            text.p(point);
            view.addData(text);
        }
        else {
            var node = new ht.Node();
            node.setImage(fileNode.getImage());
            node.p(point);
            node.setDisplayName(fileNode.getName());
            view.addData(node);
        }
    };
