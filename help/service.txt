==============================
HT 服务端通讯协议
==============================

HT 编辑器默认采用 Node 作为后台服务，客户端通过 Websocket（http://socket.io/）和服务端通讯，但用户完全可以自定义其他语言平台（J2EE, .NET, Go ...）的后台服务。

服务端和客户端的通讯规约接口如下：

- NodeJS 版本限制：v10.0.0 以上

- 客户端发起请求，在 Service 上实现 request: function(cmd, data, callback) 函数处理
    1、请求目录文件信息
        - cmd: 'explore'
        - data: '/displays'|'/symbols'|'/components'|'/assets'|'/scenes'
        - callback: function(fileJSON), fileJSON 格式参见 mockDisplays.js/mockSymbols/mockComponent.js/mockAssets.js

    2、上传保存文本内容、上传资源压缩包
        - cmd: 'upload'
        - data: data.path 文本文件保存路径，data.content 文件内容，一般都处理为 base64 文本内容
        - callback: function(true|false)，参数 true 代表保存成功，false 代表保存失败

    3、获取文件文本内容
        - cmd: 'source'
        - data: data.url 所要获取内容的文件路径, data.encoding 编码方式（可选），data.prefix 数据前缀（可选）
        - callback: function(content)，content 代表返回文件内容

    4、删除目录或文件
        - cmd: 'remove'
        - data: 所要删除的目录或文件路径
        - callback: function(true|false)，参数 true 代表保存成功，false 代表保存失败

    5、重命名目录或文件
        - cmd: 'rename'
        - data: data.old 原先目录或文件路径，data.new 将要重命名的目录或文件路径，data.fileType 文件类型
        - callback: function(true|false)，参数 true 代表保存成功，false 代表保存失败

    6、创建新目录
        - cmd: 'mkdir'
        - data: 所要创建的目录路径
        - callback: function(true|false)，参数 true 代表保存成功，false 代表保存失败

    7、定位目录或文件
        - cmd: 'locate'
        - data: 所要定位的目录或文件路径
        - callback: function(true|false)，参数 true 代表保存成功，false 代表保存失败

    8、导出资源为 zip 包，将在 storage/temp 目录下生成对应的压缩包，下载完成后删除。导出时未设置预览页面将使用previews/display-export.html与symbol-export.html为默认预览页面
        - cmd: 'export'
        - data: 所要导出图纸的文件路径
        - callback: function(true|false)，参数 true 代表压缩成功等待下载，false 代表压缩失败

    9、确认覆盖资源文件，upload 上传已存在资源时需进行确认
        - cmd: 'import'
        - data: {
            path: 确认导入的临时文件夹名称（confirm 事件中获取）
            move: 是否覆盖，true 覆盖， false 覆盖
          }
        - callback: function(true|false)，参数 true 代表覆盖成功，false 代表覆盖失败。

    10、黏贴接口，根据路径在服务端对文件/文件夹进行黏贴操作。hteditor_config.copyFileByServer 默认为 true 修改为 false 复制/黏贴将改为在 client 端进行
        - cmd: 'paste'
        - data: {
            destDir: 所要黏贴的目录路径
            fileList: 所要复制的文件路径列表 ['path/symbols.json']
          }
        - callback: function(true|false)，参数 true 代表黏贴成功，false 代表黏贴失败。

- 初次建立通讯连接，需对 Service 的 handler 发出连接成功事件，收到该事件后编辑器界面才会进行初始化
    handler({
        type: 'connected',          // 连接成功类型
        message: 'http://host:port' // 连接成功信息
    });

- 服务端发起目录或文件文件变化通知，无通讯规约要求，只需对 Service 的 handler 发出变化事件
    handler({
        type: 'fileChanged', // 变化事件类型
        path: path           // 发生变化的目录或文件的全路径
    });

- 发送export打包命令，服务端压缩完成后对客服端进行通知
    handler({
        type: 'download', // 资源下载类型
        path: path        // 资源下载路径
    });

- 上传资源zip包，压缩包中包含已存在资源时进行通知
    handler({
        type: 'confirm',  // 确认类型
        path: path,       // 临时文件名
        datas: datas      // 冲突的文件路径集合
    });

- 目录文件管理
    1、将 storage，client 和 instance/custom/previews 目录映射到同路径下（rootpath），将 instance/custom/ 映射到相对的 custom 子目录下（rootPath/custom），HT 默认的 Node 服务端实现中 rootPath 为根目录 /。

    2、HT 编辑器升级后，用户只需将 client 目录用新编辑器的 client 目录整体替换即可完成升级

- 服务端访问限制控制
    1、修改 server/config.ini 文件。添加以下配置：
        auth = true // 默认为 false，false 将不进行验证
        SIDRequestService = auth/generate/sid/private // 自定义 sid 获取接口，可修改默认 GET 请求
        SIDServiceWhiteList = 192.168.0.*, 127.0.1.2 // 白名单，非白名单无法调用 SIDRequestService 接口
    2、服务端通过 SIDRequestService 接口获取sid信息
    3、客服端将只能通过 client/index.html?sid=xxx-xxxx-xxx 格式进行访问编辑器，未获取 sid 情况将无法访问系统资源
    4、预览图纸时，需引入解析文件 custom/config/htconfig.js。该js将自动从地址栏中获取 sid 信息并在图纸的预览中使用

- 服务端导出配置
    使用导出功能时，默认过滤 js 文件。开启 js 导出功能，需要在 config.ini 文件中增加一下配置：
    [global]
    exportWithJS = true

- Https 配置
  修改 server/config.ini 配置， 添加一下参数：
  [global]
  enableHttps = true // 开启 Https 服务
  // 选择一
  sslKey = key/key.pem
  sslCert = key/file.crt
  // 选择二
  sslPfx = key/server.pfx
  //证书有口令时，添加 passphrase 参数
  sslPassphrase = password

  server 服务配置代码参考：

  const options = {
    key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),
    cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')
  };

  const options = {
    pfx: fs.readFileSync('test/fixtures/test_cert.pfx'),
    passphrase: 'sample'
  };